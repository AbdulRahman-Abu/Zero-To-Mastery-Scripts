TERNARY OPERATORS

function isUserValid(bool) {
  return bool;
};

var answer = isUserValid(true) ? "You can enter" : "Access Denied";

The above is ternary operator. The ternary operator above and the below function will give same answers when called
OR

function condition() {
  if (isUserValid) {
    return "You can enter";
  } else
    { 
      return "Access Denied";
 }
};


SWITCH STATEMENT.
I sincerely do not understand this SWITCH statement

 function moveCommand(direction) {
        var whatHappens;
        switch(direction) {
            case "forward":
                whatHappens = "you encouter a monster";
                break;
            case "back":
                whatHappens = "you arrived home";
                break;
            case "right":
                whatHappens = "you found a river";
                break;
            case "left":
                whatHappens = "you run into a troll";
                break;
            default:
                    whatHappens = "please enter a valid direction";
                    break;
        }
        return whatHappens;
    }


moveCommand("forward");

window.moveCommand("back");


const, let
After learning const and let dont use var again.
If you have anything that should not change eg a name, use const
A function could also be a const if you feel the assignment will not change eg
const a = function() {
 console.log(a);
}

use let when you know your var will change eg true to false

you can change the properties in a const object but you just cant reassign the var eg
const obj = {
  name: "Bobby",
  married: "single",
  age: 20
}
we can reassign 
obj.married = "married";

but we can not reasign 
obj = "hey" // error //

DESTRUCTURING


const obj = {
    player: "Bobby",
    experience: 100,
    wizardLevel: false
}
obj.player;
obj.experience;
let wizardLevel = obj.wizardLevel;

const { player, experience} = obj;
let { wizardLevel} = obj;

say we want to grab the properties of obj, ordinarily we would do;
const player = obj.player;
const experience = obj.experience;
let wizardLevel = obj.wizardLevel;

But with destructuring, it become easier;
const{ player, experience} = obj;
let {wizardLevel} = obj;
it means: get const player, experience from the obj